#Docker compose version
version: '3.9'

#Services to be powered up
services:

  ######################################################################
  ######################################################################

  ###################################################
  ############# Servicio de FRONTEND Vue.JS
  ####################################################
  frontend:
    # Imagen de node a utilizar, junto con la última versión estable
    image: "node:20.5.0-alpine"
    user: "node"
    container_name: 'frontend_homeway'
    restart: always
    # Directorio de trabajo dentro del contenedor
    working_dir: /home/frontend
    tty: true
    # Entorno en el que se
    environment:
      # FOR DEVELOPMENT
      - NODE_ENV=development
      - FRONTEND_PORT=8089
      # FOR DEVELOPMENT AND PRODUCTION VARS
      - FRONTEND_BASEPATH=/
      - BACKEND_URI=/api
      - VUE_APP_PROJECT_ACRONYM=homeway 
      - VUE_APP_PAYPAL_CLIENT_ID=AVz6RVz9orKXdPi4w0jT-fY6YZ45d_m9Yqmy4gydNLt00tUJREwhsiMmTym-lLCYlNy9kp1OcIjT7w1p
      - NODE_OPTIONS=--openssl-legacy-provider
      # TIMEZOME
      - TZ=Europe/Madrid
    # Se monta el código fuente en el directorio /home/node del contenedor
    volumes:
      - ./../../1-frontend:/home/frontend
    # Indica los puertos TCP/IP los cuales se pueden accede a los servicios del contenedor
    expose:
      - "8089"
    # Se mapean los puertos locales al servidor host.
    ports:
      - '8089:8089'
    # Indicamos que el contenedor se encuentra en una red, para que esté visible con el resto de contenedores.
    networks:
      - red-apps
    # Comando que ejecuta el contenedor para arrancar el servidor 'npm run dev'
    command: ash -c "npm install && npm run serve"

  ###################################################
  ############# Servicio de BACKEND
  ####################################################
  backend:
    # Imagen de node a utilizar, junto con la última versión estable
    image: "node:20.5.0-alpine"
    user: "root"
    restart: always
    container_name: 'backend_homeway'
    # Directorio de trabajo dentro del contenedor
    working_dir: /home/backend
    tty: true
    # Entorno en el que se
    environment:
      - PROJECT_ACRONYM=homeway
      - NODE_ENV=development
      - API_PORT=8091
      - API_URL_BASE_PATH=/api
      - MONGO_DB_URL=mongodb://mongodb:27017/homeway?tls=false
      - TZ=Europe/Madrid
      - EMAIL_USER=homewaytfg@gmail.com
      - EMAIL_PASS=icfx cnpg tuog vgqt
      - PAYPAL_CLIENT_ID=AVz6RVz9orKXdPi4w0jT-fY6YZ45d_m9Yqmy4gydNLt00tUJREwhsiMmTym-lLCYlNy9kp1OcIjT7w1p
      - PAYPAL_CLIENT_SECRET=EEG7IDYjjtcoyiCQb6wHWoDZNqYJPeWdVZ3V3Vh-5AQvzsyu0NR-AbIXFta2pCDGCEb7G2mue8aC_keZ
    # Se monta el código fuente en el directorio /home/node del contenedor
    volumes:
      - ./../../2-backend/:/home/backend
    # Indica los puertos TCP/IP los cuales se pueden accede a los servicios del contenedor
    # Expose es para que este disponible desde fuera de Docker, quitar en produccion
    expose:
      - "8091"
    # Se mapean los puertos locales al servidor host.
    ports:
      - '8091:8091' # 
      - '9231:9231' # puerto para depurar - comentar cuando se pase a pro
    # Indicamos que el contenedor se encuentra en una red, para que esté visible con el resto de contenedores.
    networks:
      - red-apps
    # Comando que ejecuta el contenedor para arrancar el servidor
    command: ash -c "npm install && npm install date-fns && npm install @paypal/payouts-sdk && npm install nodemailer && npm run dev"

  ###################################################
  ############# Servicio de MONGO
  ####################################################
  mongodb:
    # Imagen de MongoDB a utilizar, junto con la última versión estable.
    image: "mongo:6.0.7"
    container_name: mongodb_homeway
    # Reinicia el servicio automáticamente.
    restart: always
    environment:
      - TZ=Europe/Madrid
    expose:
      - '27017'
    # Se mapean los puertos locales al servidor host.
    ports:
      - '27017:27017'
    # Se indica que tenemos un volumen para la base de datos. Con el objetivo, de persistir la información si paramos el contenedor.
    volumes:
      - mongodbvol:/data/db
      - ./mongo/backup:/data/backup
    # Indicamos que el contenedor se encuentra en una red, para que esté visible con el resto de contenedores.
    networks:
       - red-apps

  ###############  WEBSERVER  ##############
  ##########################################
  # REVERSE PROXY - NGINX
  ########################
  nginx:
    image: 'nginx:alpine'
    container_name: 'nginx_homeway'
    restart: always
    tty: true
    networks:
      - red-apps
    ports:
      - '80:80'
      - '443:443'
    expose:
      - "80"
      - "443"
    volumes:
      #Configuracion NGINX (default.conf)
      - './nginx/:/etc/nginx/conf.d'

  #################################################################################################
  #################################################################################################
  #################################################################################################
  #################################################################################################


#Adaptador de red comun
networks:
  red-apps:
    driver: bridge


# Definimos los volumenes de persistencia
volumes:
  mongodbvol:
  mysql_data: